var searchIndex = {};
searchIndex["gc"] = {"doc":"Thread-local garbage-collected boxes (The `Gc&lt;T&gt;` type).","items":[[3,"Gc","gc","A garbage-collected pointer type over an immutable value.",null,null],[3,"GcCell","","A mutable memory location with dynamically checked borrow rules\nthat can be used inside of a garbage-collected pointer.",null,null],[3,"GcCellRef","","A wrapper type for an immutably borrowed value from a `GcCell&lt;T&gt;`.",null,null],[3,"GcCellRefMut","","A wrapper type for a mutably borrowed value from a `GcCell&lt;T&gt;`.",null,null],[5,"force_collect","","Immediately triggers a garbage collection on the current thread.",null,{"inputs":[],"output":null}],[0,"trace","","",null,null],[8,"Trace","gc::trace","The Trace trait, which needs to be implemented on garbage-collected objects.",null,null],[10,"trace","","Marks all contained `Gc`s.",0,null],[10,"root","","Increments the root-count of all contained `Gc`s.",0,null],[10,"unroot","","Decrements the root-count of all contained `Gc`s.",0,null],[11,"new","gc","Constructs a new `Gc&lt;T&gt;` with the given value.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"trace","","",1,null],[11,"root","","",1,null],[11,"unroot","","",1,null],[11,"clone","","",1,null],[11,"deref","","",1,null],[11,"drop","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Creates a new `GcCell` containing `value`.",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Consumes the `GcCell`, returning the wrapped value.",2,null],[11,"borrow","","Immutably borrows the wrapped value.",2,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",2,null],[11,"trace","","",2,null],[11,"root","","",2,null],[11,"unroot","","",2,null],[11,"deref","","",3,null],[11,"drop","","",3,null],[11,"fmt","","",3,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"drop","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"fmt","","",2,null],[14,"unsafe_empty_trace","","This rule implements the trace methods with empty implementations.",null,null],[14,"custom_trace","","This rule implements the trace method.",null,null]],"paths":[[8,"Trace"],[3,"Gc"],[3,"GcCell"],[3,"GcCellRef"],[3,"GcCellRefMut"]]};
initSearch(searchIndex);
